import * as ElectronRendererIntegrations from './integrations';
export type { Breadcrumb, BreadcrumbHint, PolymorphicRequest, Request, SdkInfo, Event, EventHint, Exception, Session, Severity, SeverityLevel, Span, StackFrame, Stacktrace, Thread, Transaction, User, } from '@sentry/types';
export { addGlobalEventProcessor, addEventProcessor, addBreadcrumb, addIntegration, captureException, captureEvent, captureMessage, configureScope, createTransport, extractTraceparentData, getActiveTransaction, getHubFromCarrier, getCurrentHub, getClient, getCurrentScope, getGlobalScope, getIsolationScope, Hub, makeMain, runWithAsyncContext, Scope, startTransaction, setContext, setExtra, setExtras, setTag, setTags, setUser, spanStatusfromHttpCode, trace, withScope, captureCheckIn, withMonitor, setMeasurement, getActiveSpan, startSpan, startActiveSpan, startInactiveSpan, startSpanManual, continueTrace, ModuleMetadata, moduleMetadataIntegration, functionToStringIntegration, inboundFiltersIntegration, parameterize, } from '@sentry/core';
export type { SpanStatusType } from '@sentry/core';
export { scopeToMainIntegration } from './integrations/scope-to-main';
export { metricsAggregatorIntegration } from './integrations/metrics-aggregator';
export declare const metrics: {
    MetricsAggregator: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    increment: typeof import("@sentry/core/types/metrics/exports").increment;
    distribution: typeof import("@sentry/core/types/metrics/exports").distribution;
    set: typeof import("@sentry/core/types/metrics/exports").set;
    gauge: typeof import("@sentry/core/types/metrics/exports").gauge;
    metricsAggregatorIntegration: () => import("@sentry/types").IntegrationFnResult;
};
export { addTracingExtensions, BrowserClient, BrowserTracing, BrowserProfilingIntegration, lastEventId, showReportDialog, Replay, replayIntegration, replayCanvasIntegration, feedbackIntegration, sendFeedback, breadcrumbsIntegration, dedupeIntegration, globalHandlersIntegration, httpContextIntegration, linkedErrorsIntegration, browserApiErrorsIntegration, browserTracingIntegration, browserProfilingIntegration, } from '@sentry/browser';
export type { BrowserOptions, ReportDialogOptions } from '@sentry/browser';
/**
 * @deprecated All integrations are now exported from the root of the package.
 */
export declare const Integrations: {
    ScopeToMain: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    EventToMain: typeof ElectronRendererIntegrations.EventToMain;
    GlobalHandlers: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setup: (client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        onerror: boolean;
        onunhandledrejection: boolean;
    }> | undefined) => import("@sentry/types").Integration);
    TryCatch: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration> & (new (options?: {
        setTimeout: boolean;
        setInterval: boolean;
        requestAnimationFrame: boolean;
        XMLHttpRequest: boolean;
        eventTarget: boolean | string[];
    } | undefined) => import("@sentry/types").Integration);
    Breadcrumbs: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setup: (client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        console: boolean;
        dom: boolean | {
            serializeAttribute?: string | string[] | undefined;
            maxStringLength?: number | undefined;
        };
        fetch: boolean;
        history: boolean;
        sentry: boolean;
        xhr: boolean;
    }> | undefined) => import("@sentry/types").Integration);
    LinkedErrors: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        preprocessEvent: (event: import("@sentry/browser").Event, hint: import("@sentry/browser").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: {
        key?: string | undefined;
        limit?: number | undefined;
    } | undefined) => import("@sentry/types").Integration);
    HttpContext: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        preprocessEvent: (event: import("@sentry/browser").Event) => void;
    }>;
    Dedupe: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        processEvent: (event: import("@sentry/browser").Event) => import("@sentry/browser").Event;
    }>;
    FunctionToString: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: () => void;
    }>;
    InboundFilters: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        preprocessEvent: (event: import("@sentry/browser").Event, hint: import("@sentry/browser").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        allowUrls: (string | RegExp)[];
        denyUrls: (string | RegExp)[];
        ignoreErrors: (string | RegExp)[];
        ignoreTransactions: (string | RegExp)[];
        ignoreInternal: boolean;
        disableErrorDefaults: boolean;
        disableTransactionDefaults: boolean;
    }> | undefined) => import("@sentry/types").Integration);
};
export { init, defaultIntegrations } from './sdk';
//# sourceMappingURL=index.d.ts.map