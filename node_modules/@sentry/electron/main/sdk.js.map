{"version":3,"file":"sdk.js","sources":["../src/src/main/sdk.ts"],"sourcesContent":["import { ensureProcess, IPCMode } from '../common';\nensureProcess('main');\n\nimport { defaultIntegrations as defaultNodeIntegrations, init as nodeInit, NodeOptions } from '@sentry/node';\nimport { Integration, Options } from '@sentry/types';\nimport { Session, session, WebContents } from 'electron';\n\nimport { getDefaultEnvironment, getDefaultReleaseName, getSdkInfo } from './context';\nimport { additionalContextIntegration } from './integrations/additional-context';\nimport { childProcessIntegration } from './integrations/child-process';\nimport { electronBreadcrumbsIntegration } from './integrations/electron-breadcrumbs';\nimport { mainContextIntegration } from './integrations/main-context';\nimport { mainProcessSessionIntegration } from './integrations/main-process-session';\nimport { electronNetIntegration } from './integrations/net-breadcrumbs';\nimport { onUncaughtExceptionIntegration } from './integrations/onuncaughtexception';\nimport { preloadInjectionIntegration } from './integrations/preload-injection';\nimport { rendererProfilingIntegration } from './integrations/renderer-profiling';\nimport { screenshotsIntegration } from './integrations/screenshots';\nimport { sentryMinidumpIntegration } from './integrations/sentry-minidump';\nimport { configureIPC } from './ipc';\nimport { defaultStackParser } from './stack-parse';\nimport { ElectronOfflineTransportOptions, makeElectronOfflineTransport } from './transports/electron-offline-net';\n\nexport const defaultIntegrations: Integration[] = [\n  sentryMinidumpIntegration(),\n  electronBreadcrumbsIntegration(),\n  electronNetIntegration(),\n  mainContextIntegration(),\n  childProcessIntegration(),\n  onUncaughtExceptionIntegration(),\n  preloadInjectionIntegration(),\n  additionalContextIntegration(),\n  screenshotsIntegration(),\n  rendererProfilingIntegration(),\n  // eslint-disable-next-line deprecation/deprecation\n  ...defaultNodeIntegrations.filter(\n    (integration) => integration.name !== 'OnUncaughtException' && integration.name !== 'Context',\n  ),\n];\n\nexport interface ElectronMainOptionsInternal extends Options<ElectronOfflineTransportOptions> {\n  /**\n   * Inter-process communication mode to receive event and scope from renderers\n   *\n   * IPCMode.Classic - Configures Electron IPC\n   * IPCMode.Protocol - Configures a custom protocol\n   * IPCMode.Both - Configures both IPC and custom protocol\n   *\n   * defaults to IPCMode.Both for maximum compatibility\n   */\n  ipcMode: IPCMode;\n\n  /**\n   * A function that returns an array of Electron session objects\n   *\n   * These sessions are used to configure communication between the Electron\n   * main and renderer processes.\n   *\n   * Defaults to () => [session.defaultSession]\n   */\n  getSessions: () => Session[];\n\n  /**\n   * Callback to allow custom naming of renderer processes.\n   *\n   * If the callback is not set, or it returns `undefined`, the default naming\n   * scheme is used.\n   */\n  getRendererName?: (contents: WebContents) => string | undefined;\n\n  /**\n   * Screenshots may contain PII and is an opt-in feature\n   *\n   * If set to true, screenshots will be captured and included with all JavaScript events.\n   * Screenshots are not included for native crashes since it's not possible to capture images of crashed Electron\n   * renderers.\n   */\n  attachScreenshot?: boolean;\n\n  /**\n   * Enables injection of 'js-profiling' document policy headers and ensure profiles are forwarded with transactions\n   *\n   * Requires Electron 15+\n   */\n  enableRendererProfiling?: boolean;\n}\n\n// getSessions and ipcMode properties are optional because they have defaults\nexport type ElectronMainOptions = Pick<Partial<ElectronMainOptionsInternal>, 'getSessions' | 'ipcMode'> &\n  Omit<ElectronMainOptionsInternal, 'getSessions' | 'ipcMode'> &\n  NodeOptions;\n\nconst defaultOptions: ElectronMainOptionsInternal = {\n  _metadata: { sdk: getSdkInfo() },\n  ipcMode: IPCMode.Both,\n  getSessions: () => [session.defaultSession],\n};\n\n/**\n * Initialize Sentry in the Electron main process\n */\nexport function init(userOptions: ElectronMainOptions): void {\n  const options: ElectronMainOptionsInternal = Object.assign(defaultOptions, userOptions);\n  const defaults = defaultIntegrations;\n\n  // If we don't set a release, @sentry/node will automatically fetch from environment variables\n  if (options.release === undefined) {\n    options.release = getDefaultReleaseName();\n  }\n\n  // If we don't set an environment, @sentry/core defaults to production\n  if (options.environment === undefined) {\n    options.environment = getDefaultEnvironment();\n  }\n\n  // Unless autoSessionTracking is specifically disabled, we track sessions as the\n  // lifetime of the Electron main process\n  if (options.autoSessionTracking !== false) {\n    defaults.push(mainProcessSessionIntegration());\n    // We don't want nodejs autoSessionTracking\n    options.autoSessionTracking = false;\n  }\n\n  if (options.stackParser === undefined) {\n    options.stackParser = defaultStackParser;\n  }\n\n  setDefaultIntegrations(defaults, options);\n\n  if (options.dsn && options.transport === undefined) {\n    options.transport = makeElectronOfflineTransport;\n  }\n\n  configureIPC(options);\n  nodeInit(options);\n}\n\n/** A list of integrations which cause default integrations to be removed */\nconst INTEGRATION_OVERRIDES = [\n  { override: 'ElectronMinidump', remove: 'SentryMinidump' },\n  { override: 'BrowserWindowSession', remove: 'MainProcessSession' },\n];\n\n/** Sets the default integrations and ensures that multiple minidump or session integrations are not enabled */\nfunction setDefaultIntegrations(defaults: Integration[], options: ElectronMainOptions): void {\n  if (options.defaultIntegrations === undefined) {\n    const removeDefaultsMatching = (user: Integration[], defaults: Integration[]): Integration[] => {\n      const toRemove = INTEGRATION_OVERRIDES.filter(({ override }) => user.some((i) => i.name === override)).map(\n        ({ remove }) => remove,\n      );\n\n      return defaults.filter((i) => !toRemove.includes(i.name));\n    };\n\n    if (Array.isArray(options.integrations)) {\n      options.defaultIntegrations = removeDefaultsMatching(options.integrations, defaults);\n      return;\n    } else if (typeof options.integrations === 'function') {\n      const originalFn = options.integrations;\n\n      options.integrations = (integrations) => {\n        const resultIntegrations = originalFn(integrations);\n        return removeDefaultsMatching(resultIntegrations, resultIntegrations);\n      };\n    }\n\n    options.defaultIntegrations = defaults;\n  }\n}\n"],"names":["ensureProcess","sentryMinidumpIntegration","electronBreadcrumbsIntegration","electronNetIntegration","mainContextIntegration","childProcessIntegration","onUncaughtExceptionIntegration","preloadInjectionIntegration","additionalContextIntegration","screenshotsIntegration","rendererProfilingIntegration","defaultNodeIntegrations","getSdkInfo","IPCMode","session","getDefaultReleaseName","getDefaultEnvironment","mainProcessSessionIntegration","defaultStackParser","makeElectronOfflineTransport","configureIPC","nodeInit"],"mappings":"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"}