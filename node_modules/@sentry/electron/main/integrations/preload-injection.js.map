{"version":3,"file":"preload-injection.js","sources":["../../src/src/main/integrations/preload-injection.ts"],"sourcesContent":["import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport { app } from 'electron';\nimport { existsSync } from 'fs';\nimport { isAbsolute, resolve } from 'path';\nimport { fileURLToPath } from 'url';\n\nimport { IPCMode } from '../../common';\nimport { rendererRequiresCrashReporterStart } from '../electron-normalize';\nimport { ElectronMainOptionsInternal } from '../sdk';\n\n// After bundling with webpack, require.resolve can return number so we include that in the types\n// to ensure we check for that!\nfunction getPreloadPath(): string | number | undefined {\n  try {\n    return rendererRequiresCrashReporterStart()\n      ? require.resolve('../../preload/legacy.js')\n      : require.resolve('../../preload/index.js');\n  } catch (_) {\n    try {\n      // This could be ESM\n      const currentDir = fileURLToPath(import.meta.url);\n      // Use the CJS preload\n      return resolve(currentDir, '..', '..', '..', '..', 'preload', 'index.js');\n    } catch (_) {\n      //\n    }\n  }\n\n  return undefined;\n}\n\nconst INTEGRATION_NAME = 'PreloadInjection';\n\n/**\n * Injects the preload script into the provided sessions.\n *\n * Defaults to injecting into the defaultSession\n */\nexport const preloadInjectionIntegration = defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // noop\n    },\n    setup(client) {\n      const options = client.getOptions() as ElectronMainOptionsInternal;\n\n      // If classic IPC mode is disabled, we shouldn't attempt to inject preload scripts\n      // eslint-disable-next-line no-bitwise\n      if ((options.ipcMode & IPCMode.Classic) === 0) {\n        return;\n      }\n\n      app.once('ready', () => {\n        const path = getPreloadPath();\n\n        if (path && typeof path === 'string' && isAbsolute(path) && existsSync(path)) {\n          for (const sesh of options.getSessions()) {\n            // Fetch any existing preloads so we don't overwrite them\n            const existing = sesh.getPreloads();\n            sesh.setPreloads([path, ...existing]);\n          }\n        } else {\n          logger.log(\n            'The preload script could not be injected automatically. This is most likely caused by bundling of the main process',\n          );\n        }\n      });\n    },\n  };\n});\n\n/**\n * Injects the preload script into the provided sessions.\n *\n * Defaults to injecting into the defaultSession\n *\n * @deprecated Use `preloadInjectionIntegration()` instead\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const PreloadInjection = convertIntegrationFnToClass(INTEGRATION_NAME, preloadInjectionIntegration);\n"],"names":["rendererRequiresCrashReporterStart","fileURLToPath","resolve","defineIntegration","IPCMode","app","path","isAbsolute","existsSync","logger","convertIntegrationFnToClass"],"mappings":";;;;;;;;;;AAWA;AACA;AACA,SAAS,cAAc,GAAA;IACrB,IAAI;AACF,QAAA,OAAOA,oDAAkC,EAAE;AACzC,cAAE,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC;AAC5C,cAAE,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAC/C,KAAA;AAAC,IAAA,OAAO,CAAC,EAAE;QACV,IAAI;;YAEF,MAAM,UAAU,GAAGC,uBAAa,CAAC,2NAAe,CAAC,CAAC;;AAElD,YAAA,OAAOC,YAAO,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AAC3E,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;;AAEX,SAAA;AACF,KAAA;AAED,IAAA,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;AAE5C;;;;AAIG;AACU,MAAA,2BAA2B,GAAGC,sBAAiB,CAAC,MAAK;IAChE,OAAO;AACL,QAAA,IAAI,EAAE,gBAAgB;QACtB,SAAS,GAAA;;SAER;AACD,QAAA,KAAK,CAAC,MAAM,EAAA;AACV,YAAA,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAiC,CAAC;;;YAInE,IAAI,CAAC,OAAO,CAAC,OAAO,GAAGC,YAAO,CAAC,OAAO,MAAM,CAAC,EAAE;gBAC7C,OAAO;AACR,aAAA;AAED,YAAAC,YAAG,CAAC,IAAI,CAAC,OAAO,EAAE,MAAK;AACrB,gBAAA,MAAMC,MAAI,GAAG,cAAc,EAAE,CAAC;AAE9B,gBAAA,IAAIA,MAAI,IAAI,OAAOA,MAAI,KAAK,QAAQ,IAAIC,eAAU,CAACD,MAAI,CAAC,IAAIE,aAAU,CAACF,MAAI,CAAC,EAAE;AAC5E,oBAAA,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,WAAW,EAAE,EAAE;;AAExC,wBAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;wBACpC,IAAI,CAAC,WAAW,CAAC,CAACA,MAAI,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;AACvC,qBAAA;AACF,iBAAA;AAAM,qBAAA;AACL,oBAAAG,YAAM,CAAC,GAAG,CACR,oHAAoH,CACrH,CAAC;AACH,iBAAA;AACH,aAAC,CAAC,CAAC;SACJ;KACF,CAAC;AACJ,CAAC,EAAE;AAEH;;;;;;AAMG;AACH;AACa,MAAA,gBAAgB,GAAGC,gCAA2B,CAAC,gBAAgB,EAAE,2BAA2B;;;;;"}