{"version":3,"file":"minidump-loader.js","sources":["../../../../src/main/integrations/sentry-minidump/minidump-loader.ts"],"sourcesContent":["import { Attachment } from '@sentry/types';\nimport { basename, logger } from '@sentry/utils';\nimport { join } from 'path';\n\nimport { Mutex } from '../../../common/mutex';\nimport { getCrashesDirectory, usesCrashpad } from '../../electron-normalize';\nimport { readDirAsync, readFileAsync, statAsync, unlinkAsync } from '../../fs';\n\n/** Maximum number of days to keep a minidump before deleting it. */\nconst MAX_AGE_DAYS = 30;\nconst MS_PER_DAY = 24 * 3_600 * 1_000;\n/** Minimum number of milliseconds a minidump should not be modified for before we assume writing is complete */\nconst NOT_MODIFIED_MS = 1_000;\nconst MAX_RETRY_MS = 5_000;\nconst RETRY_DELAY_MS = 500;\nconst MAX_RETRIES = MAX_RETRY_MS / RETRY_DELAY_MS;\n\nconst MINIDUMP_HEADER = 'MDMP';\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * A function that loads minidumps\n * @param deleteAll Whether to just delete all minidumps\n * @param callback A callback to call with the attachment ready to send\n */\nexport type MinidumpLoader = (deleteAll: boolean, callback: (attachment: Attachment) => void) => Promise<void>;\n\n/**\n * Creates a minidump loader\n * @param getMinidumpPaths A function that returns paths to minidumps\n * @param preProcessFile A function that pre-processes the minidump file\n * @returns A function to fetch minidumps\n */\nexport function createMinidumpLoader(\n  getMinidumpPaths: () => Promise<string[]>,\n  preProcessFile: (file: Buffer) => Buffer = (file) => file,\n): MinidumpLoader {\n  // The mutex protects against a whole host of reentrancy issues and race conditions.\n  const mutex = new Mutex();\n\n  return async (deleteAll, callback) => {\n    // any calls to this function will be queued and run exclusively\n    await mutex.runExclusive(async () => {\n      for (const path of await getMinidumpPaths()) {\n        try {\n          if (deleteAll) {\n            continue;\n          }\n\n          logger.log('Found minidump', path);\n\n          let stats = await statAsync(path);\n\n          const thirtyDaysAgo = new Date().getTime() - MAX_AGE_DAYS * MS_PER_DAY;\n\n          if (stats.mtimeMs < thirtyDaysAgo) {\n            logger.log(`Ignoring minidump as it is over ${MAX_AGE_DAYS} days old`);\n            continue;\n          }\n\n          let retries = 0;\n\n          while (retries <= MAX_RETRIES) {\n            const twoSecondsAgo = new Date().getTime() - NOT_MODIFIED_MS;\n\n            if (stats.mtimeMs < twoSecondsAgo) {\n              const file = await readFileAsync(path);\n              const data = preProcessFile(file);\n\n              if (data.length < 10_000 || data.subarray(0, 4).toString() !== MINIDUMP_HEADER) {\n                logger.warn('Dropping minidump as it appears invalid.');\n                break;\n              }\n\n              logger.log('Sending minidump');\n\n              callback({\n                attachmentType: 'event.minidump',\n                filename: basename(path),\n                data,\n              });\n\n              break;\n            }\n\n            logger.log(`Waiting. Minidump has been modified in the last ${NOT_MODIFIED_MS} milliseconds.`);\n            retries += 1;\n            await delay(RETRY_DELAY_MS);\n            // update the stats\n            stats = await statAsync(path);\n          }\n\n          if (retries >= MAX_RETRIES) {\n            logger.warn('Timed out waiting for minidump to stop being modified');\n          }\n        } catch (e) {\n          logger.error('Failed to load minidump', e);\n        } finally {\n          // We always attempt to delete the minidump\n          try {\n            await unlinkAsync(path);\n          } catch (e) {\n            logger.warn('Could not delete minidump', path);\n          }\n        }\n      }\n    });\n  };\n}\n\n/** Attempts to remove the metadata file so Crashpad doesn't output `failed to stat report` errors to the console */\nasync function deleteCrashpadMetadataFile(crashesDirectory: string, waitMs: number = 100): Promise<void> {\n  if (waitMs > 2_000) {\n    return;\n  }\n\n  const metadataPath = join(crashesDirectory, 'metadata');\n  try {\n    await unlinkAsync(metadataPath);\n    logger.log('Deleted Crashpad metadata file', metadataPath);\n  } catch (e: any) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (e.code && e.code == 'EBUSY') {\n      // Since Crashpad probably still has the metadata file open, we make a few attempts to delete it, backing\n      // off and waiting longer each time.\n      setTimeout(async () => {\n        await deleteCrashpadMetadataFile(crashesDirectory, waitMs * 2);\n      }, waitMs);\n    }\n  }\n}\n\nasync function readDirsAsync(paths: string[]): Promise<string[]> {\n  const found: string[] = [];\n  for (const path of paths) {\n    try {\n      const files = await readDirAsync(path);\n      found.push(...files.map((file) => join(path, file)));\n    } catch (_) {\n      //\n    }\n  }\n  return found;\n}\n\nfunction crashpadMinidumpLoader(): MinidumpLoader {\n  const crashesDirectory: string = getCrashesDirectory();\n  const crashpadSubDirectory = process.platform === 'win32' ? 'reports' : 'completed';\n\n  const dumpDirectories = [join(crashesDirectory, crashpadSubDirectory)];\n\n  if (process.platform === 'darwin') {\n    dumpDirectories.push(join(crashesDirectory, 'pending'));\n  }\n\n  return createMinidumpLoader(async () => {\n    await deleteCrashpadMetadataFile(crashesDirectory).catch((error) => logger.error(error));\n    const files = await readDirsAsync(dumpDirectories);\n    return files.filter((file) => file.endsWith('.dmp'));\n  });\n}\n\n/** Crudely parses the minidump from the Breakpad multipart file */\nfunction minidumpFromBreakpadMultipart(file: Buffer): Buffer {\n  const binaryStart = file.lastIndexOf('Content-Type: application/octet-stream');\n  if (binaryStart > 0) {\n    const dumpStart = file.indexOf(MINIDUMP_HEADER, binaryStart);\n    const dumpEnd = file.lastIndexOf('----------------------------');\n\n    if (dumpStart > 0 && dumpEnd > 0 && dumpEnd > dumpStart) {\n      return file.subarray(dumpStart, dumpEnd);\n    }\n  }\n\n  return file;\n}\n\nfunction removeBreakpadMetadata(crashesDirectory: string, paths: string[]): void {\n  // Remove all metadata files and forget about them.\n  Promise.all(\n    paths\n      .filter((file) => file.endsWith('.txt') && !file.endsWith('log.txt'))\n      .map(async (file) => {\n        const path = join(crashesDirectory, file);\n        try {\n          await unlinkAsync(path);\n        } catch (e) {\n          logger.warn('Could not delete', path);\n        }\n      }),\n  ).catch(() => {\n    // ignore since we catch each unlink individually\n  });\n}\n\nfunction breakpadMinidumpLoader(): MinidumpLoader {\n  const crashesDirectory: string = getCrashesDirectory();\n\n  return createMinidumpLoader(async () => {\n    // Breakpad stores all minidump files along with a metadata file directly in\n    // the crashes directory.\n    const files = await readDirAsync(crashesDirectory);\n    removeBreakpadMetadata(crashesDirectory, files);\n    return files.filter((file) => file.endsWith('.dmp')).map((file) => join(crashesDirectory, file));\n  }, minidumpFromBreakpadMultipart);\n}\n\n/**\n * Gets the minidump loader\n */\nexport function getMinidumpLoader(): MinidumpLoader {\n  return usesCrashpad() ? crashpadMinidumpLoader() : breakpadMinidumpLoader();\n}\n"],"names":[],"mappings":"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"}