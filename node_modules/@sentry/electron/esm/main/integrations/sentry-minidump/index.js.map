{"version":3,"file":"index.js","sources":["../../../../src/main/integrations/sentry-minidump/index.ts"],"sourcesContent":["import {\n  applyScopeDataToEvent,\n  captureEvent,\n  convertIntegrationFnToClass,\n  defineIntegration,\n  getCurrentScope,\n  Scope,\n} from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { Event, ScopeData } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\nimport { app, crashReporter } from 'electron';\n\nimport { mergeEvents } from '../../../common';\nimport { getDefaultEnvironment, getDefaultReleaseName, getEventDefaults } from '../../context';\nimport { EXIT_REASONS, onChildProcessGone, onRendererProcessGone } from '../../electron-normalize';\nimport { getSentryCachePath } from '../../fs';\nimport { getRendererProperties, trackRendererProperties } from '../../renderers';\nimport { ElectronMainOptions } from '../../sdk';\nimport { checkPreviousSession, sessionCrashed } from '../../sessions';\nimport { BufferedWriteStore } from '../../store';\nimport { getMinidumpLoader, MinidumpLoader } from './minidump-loader';\n\ninterface PreviousRun {\n  scope: ScopeData;\n  event?: Event;\n}\n\nconst INTEGRATION_NAME = 'SentryMinidump';\n\ninterface Options {\n  /**\n   * Maximum number of minidumps to send per session\n   * Once this number has been reached, no more minidumps will be sent\n   *\n   * default: 10\n   */\n  maxMinidumpsPerSession?: number;\n}\n\n/**\n * Sends minidumps via the Sentry uploader\n */\nexport const sentryMinidumpIntegration = defineIntegration((options: Options = {}) => {\n  // The remaining number of minidumps that can be sent in this session\n  let minidumpsRemaining = options.maxMinidumpsPerSession || 10;\n  // Store to persist context information beyond application crashes.\n  let scopeStore: BufferedWriteStore<PreviousRun> | undefined;\n  // We need to store the scope in a variable here so it can be attached to minidumps\n  let scopeLastRun: Promise<PreviousRun> | undefined;\n  let minidumpLoader: MinidumpLoader | undefined;\n\n  function startCrashReporter(): void {\n    logger.log('Starting Electron crashReporter');\n\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: app.name || app.getName(),\n      // Empty string doesn't work for Linux Crashpad and no submitURL doesn't work for older versions of Electron\n      submitURL: 'https://f.a.k/e',\n      uploadToServer: false,\n      compress: true,\n    });\n  }\n\n  function setupScopeListener(currentRelease: string, currentEnvironment: string): void {\n    const scopeChanged = (updatedScope: Scope): void => {\n      // Since the initial scope read is async, we need to ensure that any writes do not beat that\n      // https://github.com/getsentry/sentry-electron/issues/585\n      setImmediate(async () =>\n        scopeStore?.set({\n          scope: updatedScope.getScopeData(),\n          event: await getEventDefaults(currentRelease, currentEnvironment),\n        }),\n      );\n    };\n\n    const scope = getCurrentScope();\n\n    if (scope) {\n      scope.addScopeListener(scopeChanged);\n      // Ensure at least one event is written to disk\n      scopeChanged(scope);\n    }\n  }\n\n  async function sendNativeCrashes(client: NodeClient, eventIn: Event): Promise<boolean> {\n    // Whenever we are called, assume that the crashes we are going to load down\n    // below have occurred recently. This means, we can use the same event data\n    // for all minidumps that we load now. There are two conditions:\n    //\n    //  1. The application crashed and we are just starting up. The stored\n    //     breadcrumbs and context reflect the state during the application\n    //     crash.\n    //\n    //  2. A renderer process crashed recently and we have just been notified\n    //     about it. Just use the breadcrumbs and context information we have\n    //     right now and hope that the delay was not too long.\n\n    const event = eventIn;\n\n    // If this is a native main process crash, we need to apply the scope and context from the previous run\n    if (event.tags?.['event.process'] === 'browser') {\n      const previousRun = await scopeLastRun;\n      if (previousRun) {\n        if (previousRun.scope) {\n          applyScopeDataToEvent(event, previousRun.scope);\n        }\n\n        event.release = previousRun.event?.release || event.release;\n        event.environment = previousRun.event?.environment || event.environment;\n        event.contexts = previousRun.event?.contexts || event.contexts;\n      }\n    }\n\n    if (!event) {\n      return false;\n    }\n\n    if (minidumpsRemaining <= 0) {\n      logger.log('Not sending minidumps because the limit has been reached');\n    }\n\n    // If the SDK is not enabled, or we've already reached the minidump limit, tell the loader to delete all minidumps\n    const deleteAll = client.getOptions().enabled === false || minidumpsRemaining <= 0;\n\n    let minidumpFound = false;\n    await minidumpLoader?.(deleteAll, (attachment) => {\n      minidumpFound = true;\n\n      if (minidumpsRemaining > 0) {\n        minidumpsRemaining -= 1;\n        captureEvent(event as Event, { attachments: [attachment] });\n      }\n    });\n\n    return minidumpFound;\n  }\n\n  async function sendRendererCrash(\n    client: NodeClient,\n    options: ElectronMainOptions,\n    contents: Electron.WebContents,\n    details: Partial<Electron.RenderProcessGoneDetails>,\n  ): Promise<void> {\n    const { getRendererName, release, environment } = options;\n    const crashedProcess = getRendererName?.(contents) || 'renderer';\n\n    logger.log(`'${crashedProcess}' process '${details.reason}'`);\n\n    const event = mergeEvents(await getEventDefaults(release, environment), {\n      contexts: {\n        electron: {\n          crashed_url: getRendererProperties(contents.id)?.url || 'unknown',\n          details,\n        },\n      },\n      level: 'fatal',\n      // The default is javascript\n      platform: 'native',\n      tags: {\n        'event.environment': 'native',\n        'event.process': crashedProcess,\n        'exit.reason': details.reason,\n        event_type: 'native',\n      },\n    });\n\n    const found = await sendNativeCrashes(client, event);\n\n    if (found) {\n      sessionCrashed();\n    }\n  }\n\n  async function sendChildProcessCrash(\n    client: NodeClient,\n    options: ElectronMainOptions,\n    details: Omit<Electron.Details, 'exitCode'>,\n  ): Promise<void> {\n    logger.log(`${details.type} process has ${details.reason}`);\n\n    const { release, environment } = options;\n\n    const event = mergeEvents(await getEventDefaults(release, environment), {\n      contexts: {\n        electron: { details },\n      },\n      level: 'fatal',\n      // The default is javascript\n      platform: 'native',\n      tags: {\n        'event.environment': 'native',\n        'event.process': details.type,\n        'exit.reason': details.reason,\n        event_type: 'native',\n      },\n    });\n\n    const found = await sendNativeCrashes(client, event);\n\n    if (found) {\n      sessionCrashed();\n    }\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // noop\n    },\n    setup(client: NodeClient): void {\n      // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n      // requirements. In this case, we prevent enabling native crashes entirely.\n      // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n      if (process.mas) {\n        return;\n      }\n\n      startCrashReporter();\n\n      scopeStore = new BufferedWriteStore<PreviousRun>(getSentryCachePath(), 'scope_v3', {\n        scope: new Scope().getScopeData(),\n      });\n      scopeLastRun = scopeStore.get();\n      minidumpLoader = getMinidumpLoader();\n\n      const options = client.getOptions();\n\n      const currentRelease = options?.release || getDefaultReleaseName();\n      const currentEnvironment = options?.environment || getDefaultEnvironment();\n\n      setupScopeListener(currentRelease, currentEnvironment);\n\n      if (!options?.dsn) {\n        throw new SentryError('Attempted to enable Electron native crash reporter but no DSN was supplied');\n      }\n\n      trackRendererProperties();\n\n      onRendererProcessGone(EXIT_REASONS, (contents, details) => sendRendererCrash(client, options, contents, details));\n      onChildProcessGone(EXIT_REASONS, (details) => sendChildProcessCrash(client, options, details));\n\n      // Start to submit recent minidump crashes. This will load breadcrumbs and\n      // context information that was cached on disk in the previous app run, prior to the crash.\n      sendNativeCrashes(client, {\n        level: 'fatal',\n        platform: 'native',\n        tags: {\n          'event.environment': 'native',\n          'event.process': 'browser',\n          event_type: 'native',\n        },\n      })\n        .then((minidumpsFound) =>\n          // Check for previous uncompleted session. If a previous session exists\n          // and no minidumps were found, its likely an abnormal exit\n          checkPreviousSession(minidumpsFound),\n        )\n        .catch((error) => logger.error(error));\n    },\n  };\n});\n\n/**\n * Sends minidumps via the Sentry uploader\n *\n * @deprecated Use `sentryMinidumpIntegration()` instead\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const SentryMinidump = convertIntegrationFnToClass(INTEGRATION_NAME, sentryMinidumpIntegration);\n"],"names":[],"mappings":"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"}