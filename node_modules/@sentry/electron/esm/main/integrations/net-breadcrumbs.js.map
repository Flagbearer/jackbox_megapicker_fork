{"version":3,"file":"net-breadcrumbs.js","sources":["../../../src/main/integrations/net-breadcrumbs.ts"],"sourcesContent":["import {\n  addBreadcrumb,\n  /* eslint-disable deprecation/deprecation */\n  convertIntegrationFnToClass,\n  defineIntegration,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n} from '@sentry/core';\nimport { DynamicSamplingContext, Span, TracePropagationTargets } from '@sentry/types';\nimport {\n  dynamicSamplingContextToSentryBaggageHeader,\n  fill,\n  generateSentryTraceHeader,\n  logger,\n  LRUMap,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\nimport { ClientRequest, ClientRequestConstructorOptions, IncomingMessage, net as electronNet } from 'electron';\nimport * as urlModule from 'url';\n\ntype ShouldTraceFn = (method: string, url: string) => boolean;\n\nexport interface NetOptions {\n  /**\n   * Whether breadcrumbs should be captured for net requests\n   *\n   * Defaults to: true\n   */\n  breadcrumbs?: boolean;\n  /**\n   * Whether to capture transaction spans for net requests\n   *\n   * true | false | (method: string, url: string) => boolean\n   * Defaults to: true\n   */\n  tracing?: ShouldTraceFn | boolean;\n\n  /**\n   * @deprecated Use `tracePropagationTargets` client option instead.\n   *\n   * Sentry.init({\n   *   tracePropagationTargets: ['api.site.com'],\n   * })\n   */\n  tracingOrigins?: ShouldTraceFn | boolean;\n}\n\n/**\n * Trimmed down version of the code from Electron here:\n * https://github.com/electron/electron/blob/f3df76dbdc58cb704637b89357e1400791c92cfe/lib/browser/api/net.ts#L209-L269\n *\n * We want to match the final URL that Electron uses\n */\nfunction parseOptions(optionsIn: ClientRequestConstructorOptions | string): { method: string; url: string } {\n  const { method, options } =\n    typeof optionsIn === 'string'\n      ? { method: 'GET', options: urlModule.parse(optionsIn) }\n      : { method: (optionsIn.method || 'GET').toUpperCase(), options: optionsIn };\n\n  let url = 'url' in options ? options.url : undefined;\n\n  if (!url) {\n    const urlObj: urlModule.UrlObject = {};\n    urlObj.protocol = options.protocol || 'http:';\n\n    if (options.host) {\n      urlObj.host = options.host;\n    } else {\n      if (options.hostname) {\n        urlObj.hostname = options.hostname;\n      } else {\n        urlObj.hostname = 'localhost';\n      }\n\n      if (options.port) {\n        urlObj.port = options.port;\n      }\n    }\n\n    const pathObj = urlModule.parse(options.path || '/');\n    urlObj.pathname = pathObj.pathname;\n    urlObj.search = pathObj.search;\n    urlObj.hash = pathObj.hash;\n    url = urlModule.format(urlObj);\n  }\n\n  return {\n    method,\n    url,\n  };\n}\n\nfunction addHeadersToRequest(\n  request: Electron.ClientRequest,\n  url: string,\n  sentryTraceHeader: string,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): void {\n  logger.log(`[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to \"${url}\": `);\n  request.setHeader('sentry-trace', sentryTraceHeader);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  if (sentryBaggageHeader) {\n    request.setHeader('baggage', sentryBaggageHeader);\n  }\n}\n\ntype RequestOptions = string | ClientRequestConstructorOptions;\ntype RequestMethod = (opt: RequestOptions) => ClientRequest;\ntype WrappedRequestMethodFactory = (original: RequestMethod) => RequestMethod;\n\nfunction createWrappedRequestFactory(\n  options: NetOptions,\n  tracePropagationTargets: TracePropagationTargets | undefined,\n): WrappedRequestMethodFactory {\n  // We're caching results so we don't have to recompute regexp every time we create a request.\n  const createSpanUrlMap = new LRUMap<string, boolean>(100);\n  const headersUrlMap = new LRUMap<string, boolean>(100);\n\n  const shouldCreateSpan = (method: string, url: string): boolean => {\n    if (options.tracing === undefined) {\n      return true;\n    }\n\n    if (options.tracing === false) {\n      return false;\n    }\n\n    const key = `${method}:${url}`;\n\n    const cachedDecision = createSpanUrlMap.get(key);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = options.tracing === true || options.tracing(method, url);\n    createSpanUrlMap.set(key, decision);\n    return decision;\n  };\n\n  // This will be considerably simpler once `tracingOrigins` is removed in the next major release\n  const shouldAttachTraceData = (method: string, url: string): boolean => {\n    if (options.tracingOrigins === false) {\n      return false;\n    }\n\n    // Neither integration nor client options are set or integration option is set to true\n    if (\n      (options.tracingOrigins === undefined && tracePropagationTargets === undefined) ||\n      options.tracingOrigins === true\n    ) {\n      return true;\n    }\n\n    const key = `${method}:${url}`;\n\n    const cachedDecision = headersUrlMap.get(key);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    if (tracePropagationTargets) {\n      const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n      headersUrlMap.set(key, decision);\n      return decision;\n    }\n\n    if (options.tracingOrigins) {\n      const decision = options.tracingOrigins(method, url);\n      headersUrlMap.set(key, decision);\n      return decision;\n    }\n\n    // We cannot reach here since either `tracePropagationTargets` or `tracingOrigins` will be defined but TypeScript\n    // cannot infer that\n    return true;\n  };\n\n  return function wrappedRequestMethodFactory(originalRequestMethod: RequestMethod): RequestMethod {\n    return function requestMethod(this: typeof electronNet, reqOptions: RequestOptions): ClientRequest {\n      const { url, method } = parseOptions(reqOptions);\n      const request = originalRequestMethod.apply(this, [reqOptions]) as ClientRequest;\n\n      if (url.match(/sentry_key/) || request.getHeader('x-sentry-auth')) {\n        return request;\n      }\n\n      let span: Span | undefined;\n\n      const scope = getCurrentScope();\n      if (scope && shouldCreateSpan(method, url)) {\n        const parentSpan = scope.getSpan();\n\n        if (parentSpan) {\n          span = parentSpan.startChild({\n            description: `${method} ${url}`,\n            op: 'http.client',\n          });\n\n          if (shouldAttachTraceData(method, url)) {\n            const sentryTraceHeader = span.toTraceparent();\n            const dynamicSamplingContext = span?.transaction?.getDynamicSamplingContext();\n\n            addHeadersToRequest(request, url, sentryTraceHeader, dynamicSamplingContext);\n          }\n        } else {\n          if (shouldAttachTraceData(method, url)) {\n            const { traceId, sampled, dsc } = scope.getPropagationContext();\n            const sentryTraceHeader = generateSentryTraceHeader(traceId, undefined, sampled);\n\n            const client = getClient();\n            const dynamicSamplingContext =\n              dsc || (client ? getDynamicSamplingContextFromClient(traceId, client, scope) : undefined);\n\n            addHeadersToRequest(request, url, sentryTraceHeader, dynamicSamplingContext);\n          }\n        }\n      }\n\n      return request\n        .once('response', function (this: ClientRequest, res: IncomingMessage): void {\n          if (options.breadcrumbs !== false) {\n            addRequestBreadcrumb('response', method, url, this, res);\n          }\n          if (span) {\n            if (res.statusCode) {\n              span.setHttpStatus(res.statusCode);\n            }\n            span.finish();\n          }\n        })\n        .once('error', function (this: ClientRequest, _error: Error): void {\n          if (options.breadcrumbs !== false) {\n            addRequestBreadcrumb('error', method, url, this, undefined);\n          }\n          if (span) {\n            span.setHttpStatus(500);\n            span.finish();\n          }\n        });\n    };\n  };\n}\n\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(\n  event: string,\n  method: string,\n  url: string,\n  req: ClientRequest,\n  res?: IncomingMessage,\n): void {\n  addBreadcrumb(\n    {\n      type: 'http',\n      category: 'electron.net',\n      data: {\n        url,\n        method: method,\n        status_code: res?.statusCode,\n      },\n    },\n    {\n      event,\n      request: req,\n      response: res,\n    },\n  );\n}\n\nconst INTEGRATION_NAME = 'Net';\n\n/**\n * Electron 'net' module integration\n */\nexport const electronNetIntegration = defineIntegration((options: NetOptions = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // noop\n    },\n    setup() {\n      const clientOptions = getClient()?.getOptions();\n\n      // No need to instrument if we don't want to track anything\n      if (options.breadcrumbs === false && options.tracing === false) {\n        return;\n      }\n\n      fill(electronNet, 'request', createWrappedRequestFactory(options, clientOptions?.tracePropagationTargets));\n    },\n  };\n});\n\n/**\n * Electron 'net' module integration\n *\n * @deprecated Use `electronNetIntegration()` instead\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Net = convertIntegrationFnToClass(INTEGRATION_NAME, electronNetIntegration);\n"],"names":["electronNet"],"mappings":"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"}