{"version":3,"file":"screenshots.js","sources":["../../../src/main/integrations/screenshots.ts"],"sourcesContent":["import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport { BrowserWindow } from 'electron';\n\nimport { capturePage } from '../electron-normalize';\nimport { ElectronMainOptions } from '../sdk';\n\nconst INTEGRATION_NAME = 'Screenshots';\n\n/**\n * Captures and attaches screenshots to events\n */\nexport const screenshotsIntegration = defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // noop\n    },\n    async processEvent(event, hint, client) {\n      const attachScreenshot = !!(client.getOptions() as ElectronMainOptions).attachScreenshot;\n\n      if (!attachScreenshot) {\n        return event;\n      }\n\n      // We don't capture screenshots for transactions or native crashes\n      if (!event.transaction && event.platform !== 'native') {\n        let count = 1;\n\n        for (const window of BrowserWindow.getAllWindows()) {\n          if (!hint.attachments) {\n            hint.attachments = [];\n          }\n\n          try {\n            if (!window.isDestroyed() && window.isVisible()) {\n              const filename = count === 1 ? 'screenshot.png' : `screenshot-${count}.png`;\n              const image = await capturePage(window);\n\n              hint.attachments.push({ filename, data: image.toPNG(), contentType: 'image/png' });\n\n              count += 1;\n            }\n          } catch (e) {\n            // Catch all errors so we don't break event submission if something goes wrong\n            logger.error('Error capturing screenshot', e);\n          }\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\n/**\n * Adds Screenshots to events\n *\n * @deprecated Use `screenshotsIntegration()` instead\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Screenshots = convertIntegrationFnToClass(INTEGRATION_NAME, screenshotsIntegration);\n"],"names":[],"mappings":";;;;;;AAOA,MAAM,gBAAgB,GAAG,aAAa,CAAC;AAEvC;;AAEG;AACU,MAAA,sBAAsB,GAAG,iBAAiB,CAAC,MAAK;IAC3D,OAAO;AACL,QAAA,IAAI,EAAE,gBAAgB;QACtB,SAAS,GAAA;;SAER;AACK,QAAA,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAA;;gBACpC,MAAM,gBAAgB,GAAG,CAAC,CAAE,MAAM,CAAC,UAAU,EAA0B,CAAC,gBAAgB,CAAC;gBAEzF,IAAI,CAAC,gBAAgB,EAAE;AACrB,oBAAA,OAAO,KAAK,CAAC;AACd,iBAAA;;gBAGD,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;oBACrD,IAAI,KAAK,GAAG,CAAC,CAAC;AAEd,oBAAA,KAAK,MAAM,MAAM,IAAI,aAAa,CAAC,aAAa,EAAE,EAAE;AAClD,wBAAA,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;AACrB,4BAAA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACvB,yBAAA;wBAED,IAAI;4BACF,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,MAAM,CAAC,SAAS,EAAE,EAAE;AAC/C,gCAAA,MAAM,QAAQ,GAAG,KAAK,KAAK,CAAC,GAAG,gBAAgB,GAAG,CAAc,WAAA,EAAA,KAAK,MAAM,CAAC;AAC5E,gCAAA,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC,CAAC;gCAExC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;gCAEnF,KAAK,IAAI,CAAC,CAAC;AACZ,6BAAA;AACF,yBAAA;AAAC,wBAAA,OAAO,CAAC,EAAE;;AAEV,4BAAA,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC;AAC/C,yBAAA;AACF,qBAAA;AACF,iBAAA;AAED,gBAAA,OAAO,KAAK,CAAC;aACd,CAAA,CAAA;AAAA,SAAA;KACF,CAAC;AACJ,CAAC,EAAE;AAEH;;;;AAIG;AACH;AACa,MAAA,WAAW,GAAG,2BAA2B,CAAC,gBAAgB,EAAE,sBAAsB;;;;"}