{"version":3,"file":"child-process.js","sources":["../../../src/main/integrations/child-process.ts"],"sourcesContent":["import { addBreadcrumb, captureMessage, convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { SeverityLevel } from '@sentry/types';\n\nimport { OrBool } from '../../common/types';\nimport { EXIT_REASONS, ExitReason, onChildProcessGone, onRendererProcessGone } from '../electron-normalize';\nimport { ElectronMainOptions } from '../sdk';\n\nexport interface ChildProcessOptions {\n  /** Child process events that generate breadcrumbs */\n  breadcrumbs: Readonly<ExitReason[]>;\n  /** Child process events that generate Sentry events */\n  events: Readonly<ExitReason[]>;\n}\n\nconst DEFAULT_OPTIONS: ChildProcessOptions = {\n  breadcrumbs: EXIT_REASONS,\n  events: ['abnormal-exit', 'launch-failed', 'integrity-failure'],\n};\n\n/** Gets message and severity */\nfunction getMessageAndSeverity(reason: ExitReason, proc?: string): { message: string; level: SeverityLevel } {\n  const message = `'${proc}' process exited with '${reason}'`;\n\n  switch (reason) {\n    case 'abnormal-exit':\n    case 'killed':\n      return { message, level: 'warning' };\n    case 'crashed':\n    case 'oom':\n    case 'launch-failed':\n    case 'integrity-failure':\n      return { message, level: 'fatal' };\n    default:\n      return { message, level: 'debug' };\n  }\n}\n\nconst INTEGRATION_NAME = 'ChildProcess';\n\n/**\n * Adds breadcrumbs for Electron child process events.\n */\nexport const childProcessIntegration = defineIntegration((userOptions: Partial<OrBool<ChildProcessOptions>> = {}) => {\n  const { breadcrumbs, events } = userOptions;\n\n  const options: ChildProcessOptions = {\n    breadcrumbs: Array.isArray(breadcrumbs) ? breadcrumbs : breadcrumbs === false ? [] : DEFAULT_OPTIONS.breadcrumbs,\n    events: Array.isArray(events) ? events : events === false ? [] : DEFAULT_OPTIONS.events,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // noop\n    },\n    setup(client: NodeClient) {\n      const { breadcrumbs, events } = options;\n      const allReasons = Array.from(new Set([...breadcrumbs, ...events]));\n\n      // only hook these events if we're after more than just the unresponsive event\n      if (allReasons.length > 0) {\n        const clientOptions = client.getOptions() as ElectronMainOptions;\n\n        onChildProcessGone(allReasons, (details) => {\n          const { reason } = details;\n\n          // Capture message first\n          if (events.includes(reason)) {\n            const { message, level } = getMessageAndSeverity(details.reason, details.type);\n            captureMessage(message, { level, tags: { 'event.process': details.type } });\n          }\n\n          // And then add breadcrumbs for subsequent events\n          if (breadcrumbs.includes(reason)) {\n            addBreadcrumb({\n              type: 'process',\n              category: 'child-process',\n              ...getMessageAndSeverity(details.reason, details.type),\n              data: details,\n            });\n          }\n        });\n\n        onRendererProcessGone(allReasons, (contents, details) => {\n          const { reason } = details;\n          const name = clientOptions?.getRendererName?.(contents) || 'renderer';\n\n          // Capture message first\n          if (events.includes(reason)) {\n            const { message, level } = getMessageAndSeverity(details.reason, name);\n            captureMessage(message, level);\n          }\n\n          // And then add breadcrumbs for subsequent events\n          if (breadcrumbs.includes(reason)) {\n            addBreadcrumb({\n              type: 'process',\n              category: 'child-process',\n              ...getMessageAndSeverity(details.reason, name),\n              data: details,\n            });\n          }\n        });\n      }\n    },\n  };\n});\n\n/**\n * Adds breadcrumbs for Electron child process events.\n *\n * @deprecated Use `childProcessIntegration()` instead\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const ChildProcess = convertIntegrationFnToClass(INTEGRATION_NAME, childProcessIntegration);\n"],"names":[],"mappings":"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"}