export type { Breadcrumb, BreadcrumbHint, PolymorphicRequest, Request, SdkInfo, Event, EventHint, Exception, Session, Severity, SeverityLevel, Span, StackFrame, Stacktrace, Thread, Transaction, User, } from '@sentry/types';
export { addGlobalEventProcessor, addEventProcessor, addBreadcrumb, addIntegration, captureException, captureEvent, captureMessage, configureScope, createTransport, extractTraceparentData, getActiveTransaction, getHubFromCarrier, getCurrentHub, getClient, getCurrentScope, getGlobalScope, getIsolationScope, Hub, makeMain, runWithAsyncContext, Scope, startTransaction, setContext, setExtra, setExtras, setTag, setTags, setUser, spanStatusfromHttpCode, trace, withScope, captureCheckIn, withMonitor, setMeasurement, getActiveSpan, startSpan, startActiveSpan, startInactiveSpan, startSpanManual, continueTrace, parameterize, metrics, functionToStringIntegration, inboundFiltersIntegration, linkedErrorsIntegration, requestDataIntegration, } from '@sentry/core';
export type { SpanStatusType } from '@sentry/core';
export { electronBreadcrumbsIntegration } from './integrations/electron-breadcrumbs';
export { onUncaughtExceptionIntegration } from './integrations/onuncaughtexception';
export { mainContextIntegration } from './integrations/main-context';
export { sentryMinidumpIntegration } from './integrations/sentry-minidump';
export { electronMinidumpIntegration } from './integrations/electron-minidump';
export { preloadInjectionIntegration } from './integrations/preload-injection';
export { mainProcessSessionIntegration } from './integrations/main-process-session';
export { browserWindowSessionIntegration } from './integrations/browser-window-session';
export { additionalContextIntegration } from './integrations/additional-context';
export { electronNetIntegration } from './integrations/net-breadcrumbs';
export { childProcessIntegration } from './integrations/child-process';
export { screenshotsIntegration } from './integrations/screenshots';
export { rendererProfileFromIpc } from './integrations/renderer-profiling';
export { anrIntegration } from './integrations/anr';
export type { NodeOptions } from '@sentry/node';
export { flush, close, NodeClient, lastEventId } from '@sentry/node';
export { makeElectronTransport } from './transports/electron-net';
export { makeElectronOfflineTransport } from './transports/electron-offline-net';
/**
 * @deprecated All integrations are now exported from the root of the package.
 */
export declare const Integrations: {
    ElectronBreadcrumbs: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    OnUncaughtException: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    MainContext: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    SentryMinidump: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    ElectronMinidump: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    PreloadInjection: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    MainProcessSession: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    BrowserWindowSession: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    AdditionalContext: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    Net: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    ChildProcess: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    Screenshots: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    RendererProfiling: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    Anr: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    Apollo: typeof import("@sentry-internal/tracing").Apollo;
    Express: typeof import("@sentry-internal/tracing").Express;
    GraphQL: typeof import("@sentry-internal/tracing").GraphQL;
    Mongo: typeof import("@sentry-internal/tracing").Mongo;
    Mysql: typeof import("@sentry-internal/tracing").Mysql;
    Postgres: typeof import("@sentry-internal/tracing").Postgres;
    Prisma: typeof import("@sentry-internal/tracing").Prisma;
    Console: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setup: (client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }>;
    Http: typeof import("@sentry/node").Http;
    OnUnhandledRejection: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setup: (client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        mode: "none" | "warn" | "strict";
    }> | undefined) => import("@sentry/types").Integration);
    Modules: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        processEvent: (event: import("@sentry/node").Event) => import("@sentry/node").Event;
    }>;
    ContextLines: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        processEvent: (event: import("@sentry/node").Event) => Promise<import("@sentry/node").Event>;
    }> & (new (options?: {
        frameContextLines?: number | undefined;
    } | undefined) => import("@sentry/types").Integration);
    Context: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        processEvent: (event: import("@sentry/node").Event) => Promise<import("@sentry/node").Event>;
    }> & (new (options?: {
        app?: boolean | undefined;
        os?: boolean | undefined;
        device?: boolean | {
            cpu?: boolean | undefined;
            memory?: boolean | undefined;
        } | undefined;
        culture?: boolean | undefined;
        cloudResource?: boolean | undefined;
    } | undefined) => import("@sentry/types").Integration);
    RequestData: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        processEvent: (event: import("@sentry/node").Event, hint: import("@sentry/node").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => import("@sentry/node").Event;
    }> & (new (options?: {
        include?: {
            cookies?: boolean | undefined;
            data?: boolean | undefined;
            headers?: boolean | undefined;
            ip?: boolean | undefined;
            query_string?: boolean | undefined;
            url?: boolean | undefined;
            user?: boolean | {
                id?: boolean | undefined;
                username?: boolean | undefined;
                email?: boolean | undefined;
            } | undefined;
        } | undefined;
        transactionNamingScheme?: import("@sentry/node").TransactionNamingScheme | undefined;
    } | undefined) => import("@sentry/types").Integration);
    LocalVariables: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        processEvent: (event: import("@sentry/node").Event) => import("@sentry/node").Event;
        setup: (client: import("@sentry/node").NodeClient) => void;
    }> & (new (options?: import("@sentry/node").LocalVariablesIntegrationOptions | undefined, session?: import("@sentry/node").DebugSession | undefined) => import("@sentry/types").Integration);
    Undici: typeof import("@sentry/node").Undici;
    Spotlight: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setup: (client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        sidecarUrl?: string | undefined;
    }> | undefined) => import("@sentry/types").Integration);
    Hapi: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration>;
    FunctionToString: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: () => void;
    }>;
    InboundFilters: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        preprocessEvent: (event: import("@sentry/node").Event, hint: import("@sentry/node").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        allowUrls: (string | RegExp)[];
        denyUrls: (string | RegExp)[];
        ignoreErrors: (string | RegExp)[];
        ignoreTransactions: (string | RegExp)[];
        ignoreInternal: boolean;
        disableErrorDefaults: boolean;
        disableTransactionDefaults: boolean;
    }> | undefined) => import("@sentry/types").Integration);
    LinkedErrors: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        preprocessEvent: (event: import("@sentry/node").Event, hint: import("@sentry/node").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: {
        key?: string | undefined;
        limit?: number | undefined;
    } | undefined) => import("@sentry/types").Integration);
};
export type { ElectronMainOptions } from './sdk';
export { init, defaultIntegrations } from './sdk';
export { IPCMode } from '../common';
export { enableMainProcessAnrDetection } from './anr';
//# sourceMappingURL=index.d.ts.map