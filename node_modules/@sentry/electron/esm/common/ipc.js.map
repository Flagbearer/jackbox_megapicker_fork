{"version":3,"file":"ipc.js","sources":["../../src/common/ipc.ts"],"sourcesContent":["import { MeasurementUnit, Primitive } from '@sentry/types';\n\nexport const PROTOCOL_SCHEME = 'sentry-ipc';\n\nexport enum IPCChannel {\n  /** IPC to check main process is listening */\n  RENDERER_START = 'sentry-electron.renderer-start',\n  /** IPC to send a captured event to Sentry. */\n  EVENT = 'sentry-electron.event',\n  /** IPC to pass scope changes to main process. */\n  SCOPE = 'sentry-electron.scope',\n  /** IPC to pass envelopes to the main process. */\n  ENVELOPE = 'sentry-electron.envelope',\n  /** IPC to pass renderer status updates */\n  STATUS = 'sentry-electron.status',\n  /** IPC to pass renderer metric additions to the main process */\n  ADD_METRIC = 'sentry-electron.add-metric',\n}\n\nexport interface RendererProcessAnrOptions {\n  /**\n   * Interval to send heartbeat messages to the child process.\n   *\n   * Defaults to 1000ms.\n   */\n  pollInterval: number;\n  /**\n   * The number of milliseconds to wait before considering the renderer process to be unresponsive.\n   *\n   * Defaults to 5000ms.\n   */\n  anrThreshold: number;\n  /**\n   * Whether to capture a stack trace when the renderer process is unresponsive.\n   *\n   * Defaults to `false`.\n   */\n  captureStackTrace: boolean;\n}\n\nexport interface RendererStatus {\n  status: 'alive' | 'visible' | 'hidden';\n  config: RendererProcessAnrOptions;\n}\n\nexport interface MetricIPCMessage {\n  metricType: 'c' | 'g' | 's' | 'd';\n  name: string;\n  value: number | string;\n  unit?: MeasurementUnit;\n  tags?: Record<string, Primitive>;\n  timestamp?: number;\n}\n\nexport interface IPCInterface {\n  sendRendererStart: () => void;\n  sendScope: (scope: string) => void;\n  sendEvent: (event: string) => void;\n  sendEnvelope: (evn: Uint8Array | string) => void;\n  sendStatus: (state: RendererStatus) => void;\n  sendAddMetric: (metric: MetricIPCMessage) => void;\n}\n\nexport const RENDERER_ID_HEADER = 'sentry-electron-renderer-id';\n\n/**\n * We store the IPC interface on window so it's the same for both regular and isolated contexts\n */\ndeclare global {\n  interface Window {\n    __SENTRY_IPC__?: IPCInterface;\n    __SENTRY__RENDERER_INIT__?: boolean;\n    __SENTRY_RENDERER_ID__?: string;\n  }\n}\n"],"names":[],"mappings":"AAEO,MAAM,eAAe,GAAG,aAAa;IAEhC,WAaX;AAbD,CAAA,UAAY,UAAU,EAAA;;AAEpB,IAAA,UAAA,CAAA,gBAAA,CAAA,GAAA,gCAAiD,CAAA;;AAEjD,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,uBAA+B,CAAA;;AAE/B,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,uBAA+B,CAAA;;AAE/B,IAAA,UAAA,CAAA,UAAA,CAAA,GAAA,0BAAqC,CAAA;;AAErC,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,wBAAiC,CAAA;;AAEjC,IAAA,UAAA,CAAA,YAAA,CAAA,GAAA,4BAAyC,CAAA;AAC3C,CAAC,EAbW,UAAU,KAAV,UAAU,GAarB,EAAA,CAAA,CAAA,CAAA;AA8CM,MAAM,kBAAkB,GAAG;;;;"}