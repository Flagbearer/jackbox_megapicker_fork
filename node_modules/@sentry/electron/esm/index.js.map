{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { dynamicRequire } from '@sentry/utils';\n\nimport { getIntegrations, removeEmptyIntegrations } from './integrations';\nimport { ElectronMainOptions } from './main';\nimport { BrowserOptions } from './renderer';\n\nexport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  PolymorphicRequest,\n  Request,\n  SdkInfo,\n  Event,\n  EventHint,\n  Exception,\n  Session,\n  // eslint-disable-next-line deprecation/deprecation\n  Severity,\n  SeverityLevel,\n  Span,\n  StackFrame,\n  Stacktrace,\n  Thread,\n  Transaction,\n  User,\n} from '@sentry/types';\n\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  addGlobalEventProcessor,\n  addEventProcessor,\n  addBreadcrumb,\n  addIntegration,\n  captureException,\n  captureEvent,\n  captureMessage,\n  // eslint-disable-next-line deprecation/deprecation\n  configureScope,\n  createTransport,\n  // eslint-disable-next-line deprecation/deprecation\n  extractTraceparentData,\n  // eslint-disable-next-line deprecation/deprecation\n  getActiveTransaction,\n  getHubFromCarrier,\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub,\n  getClient,\n  getCurrentScope,\n  getGlobalScope,\n  getIsolationScope,\n  // eslint-disable-next-line deprecation/deprecation\n  Hub,\n  // eslint-disable-next-line deprecation/deprecation\n  lastEventId,\n  // eslint-disable-next-line deprecation/deprecation\n  makeMain,\n  runWithAsyncContext,\n  Scope,\n  // eslint-disable-next-line deprecation/deprecation\n  startTransaction,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  // eslint-disable-next-line deprecation/deprecation\n  spanStatusfromHttpCode,\n  // eslint-disable-next-line deprecation/deprecation\n  trace,\n  withScope,\n  captureCheckIn,\n  withMonitor,\n  setMeasurement,\n  getActiveSpan,\n  startSpan,\n  // eslint-disable-next-line deprecation/deprecation\n  startActiveSpan,\n  startInactiveSpan,\n  startSpanManual,\n  continueTrace,\n  metrics,\n} from '@sentry/core';\nexport type { SpanStatusType } from '@sentry/core';\n\nimport type { enableAnrDetection as enableNodeAnrDetection } from '@sentry/node';\n\nexport const Integrations = getIntegrations();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ElectronOptions extends ElectronMainOptions, Omit<BrowserOptions, 'transportOptions' | 'transport'> {\n  //\n}\n\nexport { IPCMode } from './common';\n\ninterface ProcessEntryPoint {\n  init: (options: Partial<ElectronOptions>) => void;\n  close?: (timeout?: number) => Promise<boolean>;\n  flush?: (timeout?: number) => Promise<boolean>;\n  // eslint-disable-next-line deprecation/deprecation\n  enableMainProcessAnrDetection?(options: Parameters<typeof enableNodeAnrDetection>[0]): Promise<void>;\n}\n\n/** Fetches the SDK entry point for the current process */\nfunction getEntryPoint(): ProcessEntryPoint {\n  try {\n    return process.type === 'browser' ? dynamicRequire(module, './main') : require('./renderer');\n  } catch (e) {\n    throw new Error(`Failed to automatically detect correct SDK entry point.\n\nIn the Electron main process you should import via:\nimport * as Sentry from '@sentry/electron/main';\n\nIn the Electron renderer process you should import via:\nimport * as Sentry from '@sentry/electron/renderer';`);\n  }\n}\n\n/**\n * The Sentry Electron SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * entry modules. This applies to the main process as well as all renderer\n * processes or further sub processes you spawn. To set context information or\n * send manual events, use the provided methods.\n *\n * @example\n * const { init } = require('@sentry/electron');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n * @example\n * import { configureScope } from '@sentry/electron';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTags({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n *\n * @example\n * import { addBreadcrumb } from '@sentry/electron';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * import * as Sentry from '@sentry/electron';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see ElectronOptions for documentation on configuration options.\n */\nexport function init(options: Partial<ElectronOptions>): void {\n  // Filter out any EmptyIntegrations\n  removeEmptyIntegrations(options);\n\n  getEntryPoint().init(options);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const entryPoint = getEntryPoint();\n\n  if (entryPoint.close) {\n    return entryPoint.close(timeout);\n  }\n\n  throw new Error('The Electron SDK should be closed from the main process');\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const entryPoint = getEntryPoint();\n\n  if (entryPoint.flush) {\n    return entryPoint.flush(timeout);\n  }\n\n  throw new Error('The Electron SDK should be flushed from the main process');\n}\n\n/**\n * @deprecated Use `Anr` integration instead.\n *\n * ```js\n * import { init, anrIntegration } from '@sentry/electron';\n *\n * init({\n *   dsn: \"__DSN__\",\n *   integrations: [anrIntegration({ captureStackTrace: true })],\n * });\n * ```\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function enableMainProcessAnrDetection(options: Parameters<typeof enableNodeAnrDetection>[0]): Promise<void> {\n  const entryPoint = getEntryPoint();\n\n  if (entryPoint.enableMainProcessAnrDetection) {\n    return entryPoint.enableMainProcessAnrDetection(options);\n  }\n\n  throw new Error('ANR detection should be started in the main process');\n}\n"],"names":[],"mappings":";;;;;;AAuFa,MAAA,YAAY,GAAG,eAAe,GAAG;AAiB9C;AACA,SAAS,aAAa,GAAA;IACpB,IAAI;QACF,OAAO,OAAO,CAAC,IAAI,KAAK,SAAS,GAAG,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAC9F,KAAA;AAAC,IAAA,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,CAAA;;;;;;AAMiC,oDAAA,CAAA,CAAC,CAAC;AACpD,KAAA;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CG;AACG,SAAU,IAAI,CAAC,OAAiC,EAAA;;IAEpD,uBAAuB,CAAC,OAAO,CAAC,CAAC;AAEjC,IAAA,aAAa,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAED;;;;;;;AAOG;AACG,SAAgB,KAAK,CAAC,OAAgB,EAAA;;AAC1C,QAAA,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;QAEnC,IAAI,UAAU,CAAC,KAAK,EAAE;AACpB,YAAA,OAAO,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAClC,SAAA;AAED,QAAA,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;KAC5E,CAAA,CAAA;AAAA,CAAA;AAED;;;;;;;AAOG;AACG,SAAgB,KAAK,CAAC,OAAgB,EAAA;;AAC1C,QAAA,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;QAEnC,IAAI,UAAU,CAAC,KAAK,EAAE;AACpB,YAAA,OAAO,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAClC,SAAA;AAED,QAAA,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;KAC7E,CAAA,CAAA;AAAA,CAAA;AAED;;;;;;;;;;;AAWG;AACH;AACM,SAAU,6BAA6B,CAAC,OAAqD,EAAA;AACjG,IAAA,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IAEnC,IAAI,UAAU,CAAC,6BAA6B,EAAE;AAC5C,QAAA,OAAO,UAAU,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;AAC1D,KAAA;AAED,IAAA,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;AACzE;;;;"}