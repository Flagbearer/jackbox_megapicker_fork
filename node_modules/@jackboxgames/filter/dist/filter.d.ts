import { BetweenDefinition, BetweenFilter } from './filters/Between';
import { BooleanDefinition, BooleanFilter } from './filters/Boolean';
import { MultiDefinition, MultiFilter } from './filters/Multi';
import { QueryDefinition, QueryFilter } from './filters/Query';
import { RangeDefinition, RangeFilter } from './filters/Range';
import { ValueDefinition, ValueFilter } from './filters/Value';
export declare function filter(items: Filter.Item[], definitions: Filter.Definition[], sortKey?: string | string[]): Filter.Ranked[];
export declare namespace Filter {
    type Item = Record<string, any>;
    type Filter = BetweenFilter | BooleanFilter | MultiFilter | QueryFilter | RangeFilter | ValueFilter;
    type Definition = BetweenDefinition | BooleanDefinition | MultiDefinition | QueryDefinition | RangeDefinition | ValueDefinition;
    type Matches = Record<string, number | (number | string)[]>;
    interface BaseDefinition {
        key?: string;
        propertyKey: string | string[];
        value: null | boolean | string | number | (string | number)[];
        weight?: number;
        isStrict?: boolean;
    }
    interface Resolved {
        score: number;
        isMatch: boolean;
        isPerfectMatch: boolean;
        matches?: number | (number | string)[];
    }
    interface Ranked<T = Item> {
        item: T;
        unweightedScore: number;
        score: number;
        isMatch: boolean;
        isPerfectMatch: boolean;
        matches: Matches;
        isStrictZero: boolean;
    }
}
